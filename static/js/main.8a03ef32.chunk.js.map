{"version":3,"sources":["components/WeatherCard.js","components/WeatherList.js","themes/global.js","themes/theme.js","components/TemperatureToggler.js","components/ThemeToggler.js","components/Search.js","components/NavBar.js","hooks/UseFetch.js","components/App.js","config/config.js","index.js"],"names":["round","degree","Math","days","convertfromFtoC","upLimit","WeatherCard","dt","tempMin","tempMax","main","icon","description","tempType","date","Date","className","src","alt","Provider","value","color","String","fromCharCode","style","verticalAlign","getDay","toLocaleTimeString","hour","getDate","day","time","WeatherList","weathers","city","startDate","endDate","name","country","map","weather","temp_max","temp_min","GlobalStyles","createGlobalStyle","theme","body","text","cardColor","cardText","searchText","title","white","black","darkTheme","lightTheme","TemperatureToggler","c","f","cf","cc","onClick","ThemeToggler","toggler","type","SelectCity","onSearch","useState","setCity","autoComplete","placeholder","onChange","e","preventDefault","input","target","fontSize","NavBar","themeToggler","search","celcius","fahrenheit","colC","colF","href","UseFetch","initialUrl","data","setData","error","setError","isLoading","setIsLoading","url","setUrl","useEffect","fetch","then","res","json","cod","message","catch","App","setTheme","setTempType","colorF","setColorF","colorC","setColorC","textAlign","list","rel","ReactDOM","render","document","getElementById"],"mappings":"2MAKMA,EAAQ,SAACC,GACb,OAAOC,KAAKF,MAAMC,IAGdE,EAAO,CACX,SACA,SACA,UACA,YACA,WACA,SACA,YAGIC,EAAkB,SAACH,GAAD,OAA6B,EAAI,GAApBA,EAAS,KAE1CI,EAAU,GAoECC,EAlEK,SAAC,GAQd,IAPLC,EAOI,EAPJA,GACAC,EAMI,EANJA,QACAC,EAKI,EALJA,QACAC,EAII,EAJJA,KACAC,EAGI,EAHJA,KACAC,EAEI,EAFJA,YACAC,EACI,EADJA,SAEiB,MAAbA,GACFL,EAAUJ,EAAgBI,GAC1BC,EAAUL,EAAgBK,GAC1BJ,EAAU,IAEVA,EAAU,GAEZ,IAAMS,EAAO,IAAIC,KAAKR,GACtB,OACE,sBAAKS,UAAU,eAAf,UACE,qBAAKA,UAAU,gBAAf,SACE,qBACEC,IAAG,4CAAuCN,EAAvC,WACHO,IAAKR,MAGT,qBAAIM,UAAU,OAAd,UACE,+BACE,cAAC,IAAYG,SAAb,CACEC,MAAO,CACLC,MAAM,GAAD,OAAKZ,EAAUJ,EAAU,MAAQ,QACtCW,UAAW,SAHf,SAME,cAAC,IAAD,QAGHhB,EAAMS,GAXT,IAWoBa,OAAOC,aAAa,KAXxC,IAW+CV,KAE/C,qBAAIG,UAAU,MAAd,UACE,+BACE,cAAC,IAAYG,SAAb,CACEC,MAAO,CACLC,MAAM,GAAD,OAAKb,GAAWH,EAAU,OAAS,OACxCmB,MAAO,CAAEC,cAAe,UACxBT,UAAW,SAJf,SAOE,cAAC,IAAD,QAGHhB,EAAMQ,GAZT,IAYoBc,OAAOC,aAAa,KAZxC,IAY+CV,KAE/C,sBAAKG,UAAU,eAAf,UACE,oBAAIA,UAAU,gBAAd,SAA+BN,IAC/B,oBAAIM,UAAU,sBAAd,SAAqCJ,IACrC,oBAAGI,UAAU,eAAb,UACGb,EAAKW,EAAKY,UADb,KAC0B,IACvBZ,EAAKa,mBAAmB,GAAI,CAC3BC,KAAM,sBC9EdC,EAAU,SAACtB,GACb,IAAIO,EAAO,IAAIC,KAAU,IAALR,GAUpB,MAAO,CACLuB,IAVW,CACX,SACA,SACA,UACA,YACA,WACA,SACA,YAGUhB,EAAKY,UACfK,KAAMjB,EAAKa,mBAAmB,GAAI,CAChCC,KAAM,cAmCGI,EA/BK,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,SAAUC,EAAqB,EAArBA,KAAMrB,EAAe,EAAfA,SAC/BN,EAAO0B,EAAS,GAAhB1B,GACF4B,EAAYN,EAAQtB,GACpB6B,EAAUP,EAAQI,EAAS,GAAG1B,IAClC,OACE,qCACE,qBAAKS,UAAU,SAAf,SACE,oDACqBkB,EAAKG,KAD1B,KACkCH,EAAKI,QADvC,SACsDH,EAAUL,IADhE,IACsE,IACnEK,EAAUJ,KAFb,OAEuBK,EAAQN,IAF/B,KAEsCM,EAAQL,UAGhD,qBAAKf,UAAU,YAAf,SACGiB,EAASM,KAAI,gBAAGhC,EAAH,EAAGA,GAAIG,EAAP,EAAOA,KAAM8B,EAAb,EAAaA,QAAb,OACZ,8BACE,cAAC,EAAD,CACE/B,QAASC,EAAK+B,SACdjC,QAASE,EAAKgC,SACdnC,GAAS,IAALA,EACJG,KAAM8B,EAAQ,GAAG9B,KACjBC,KAAM6B,EAAQ,GAAG7B,KACjBC,YAAa4B,EAAQ,GAAG5B,YACxBC,SAAUA,KARJN,Y,u0BCjCb,IAAMoC,EAAeC,YAAH,KAUD,qBAAGC,MAAkBC,QAChC,qBAAGD,MAAkBE,QAmBV,qBAAGF,MAAkBG,aAChC,qBAAGH,MAAkBI,YAIrB,qBAAGJ,MAAkBK,cAIrB,qBAAGL,MAAkBE,QAIrB,qBAAGF,MAAkBM,SAIrB,qBAAGN,MAAkBE,QC9C5BK,EAAQ,UACRC,EAAQ,UAGDC,EAAY,CACvBR,KAPiB,UAQjBC,KAAMK,EACNJ,UARW,UASXC,SAAUI,EACVH,WAAYE,EACZD,MARa,UAWFI,EAAa,CACxBT,KAjBiB,UAkBjBC,KAAMM,EACNL,UAAWI,EACXH,SAAUI,EACVH,WAAYG,EACZF,MAAOE,GCLMG,EAdY,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,EAAGC,EAAgB,EAAhBA,EAAGC,EAAa,EAAbA,GAAIC,EAAS,EAATA,GACtC,OACE,sBAAK5C,UAAU,eAAf,UACE,sBAAMA,UAAU,UAAUQ,MAAO,CAAEH,MAAOsC,GAAME,QAASH,EAAzD,mBACMpC,OAAOC,aAAa,KAD1B,OAGA,uCACA,sBAAMP,UAAU,UAAUQ,MAAO,CAAEH,MAAOuC,GAAMC,QAASJ,EAAzD,mBACMnC,OAAOC,aAAa,KAD1B,WCISuC,EAXM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OACE,mCACE,wBAAO/C,UAAU,SAAjB,UACE,uBAAOgD,KAAK,WAAWH,QAASE,IAChC,sBAAM/C,UAAU,uBCkCTiD,EArCI,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACXC,mBAAS,IADE,mBAC5BjC,EAD4B,KACtBkC,EADsB,KAGnC,OACE,mCACE,uBAAMpD,UAAU,SAAhB,UACE,uBACEA,UAAU,eACVqD,aAAa,MACbC,YAAY,WACZC,SAAU,SAACC,GACTA,EAAEC,iBACF,IAAIC,EAAQF,EAAEG,OAAOvD,MACrBgD,EAAQM,IAEVtD,MAAOc,IAET,wBACE2B,QAAS,SAACW,GACRA,EAAEC,iBACFP,EAAShC,IAHb,SAME,cAAC,IAAYf,SAAb,CACEC,MAAO,CACLI,MAAO,CAAEC,cAAe,SAAUmD,SAAU,QAC5C5D,UAAW,eAHf,SAME,cAAC,IAAD,cCCG6D,EA9BA,SAAC,GAA+D,IAA7DC,EAA4D,EAA5DA,aAAcC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,QAASC,EAA6B,EAA7BA,WAAYC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,KACjE,OACE,mCACE,qBAAKnE,UAAU,UAAf,SACE,qBAAIA,UAAU,eAAd,UACE,6BACE,oBAAIA,UAAU,eAAd,SACE,mBAAGoE,KAAK,IAAR,uCAGJ,6BACE,cAAC,EAAD,CACE3B,EAAGuB,EACHtB,EAAGuB,EACHrB,GAAIsB,EACJvB,GAAIwB,MAGR,6BACE,cAAC,EAAD,CAAcpB,QAASe,MAEzB,6BACE,cAAC,EAAD,CAAYZ,SAAUa,cCKnBM,EA9BE,SAACC,GAAgB,IAAD,EACPnB,mBAAS,MADF,mBACxBoB,EADwB,KAClBC,EADkB,OAELrB,mBAAS,MAFJ,mBAExBsB,EAFwB,KAEjBC,EAFiB,OAGGvB,mBAAS,MAHZ,mBAGxBwB,EAHwB,KAGbC,EAHa,OAITzB,mBAASmB,GAJA,mBAIxBO,EAJwB,KAInBC,EAJmB,KA2B/B,OArBAC,qBAAU,WACHF,IACLD,GAAa,GACbJ,EAAQ,MACRE,EAAS,MACTM,MAAMH,GACHI,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACV,GACLK,GAAa,GACTL,EAAKa,KAAO,IACdV,EAASH,EAAKc,SAGhBb,EAAQD,MAETe,OAAM,SAACb,GACNG,GAAa,GACbF,EAASD,SAEZ,CAACI,IAEG,CAAEN,OAAME,QAAOE,YAAWG,WC4DpBS,EA9EH,WAAO,IAAD,EAC2BlB,IAAnCE,EADQ,EACRA,KAAME,EADE,EACFA,MAAOE,EADL,EACKA,UAAWG,EADhB,EACgBA,OADhB,EAIU3B,mBAAS,SAJnB,mBAITtB,EAJS,KAIF2D,EAJE,OAKgBrC,mBAAS,KALzB,mBAKTtD,EALS,KAKC4F,EALD,OAMYtC,mBAAS,UANrB,mBAMTuC,EANS,KAMDC,EANC,OAOYxC,mBAAS,IAPrB,mBAOTyC,EAPS,KAODC,EAPC,KAyChB,OACE,cAAC,IAAD,CAAehE,MAAiB,UAAVA,EAAoBU,EAAaD,EAAvD,SACE,qCACE,cAACX,EAAD,IACA,iCACE,cAAC,EAAD,CACEmC,aA3BU,WAEhB0B,EADY,UAAV3D,EACO,OAEA,UAwBHkC,OAAQ,SAAC7C,GACP4D,EAAO,GAAD,OC3DQ,kCD2DR,gCACmC5D,EADnC,wBC5DG,mCD4DH,qBAIR8C,QA5CS,WACjByB,EAAY,KACZI,EAAU,UACVF,EAAU,KA0CF1B,WAxCY,WACpBwB,EAAY,KACZI,EAAU,IACVF,EAAU,WAsCFxB,KAAMuB,EACNxB,KAAM0B,MAGV,+BA9BAnB,EAEA,qBAAIjE,MAAO,CAAEsF,UAAW,UAAxB,mCAA2DrB,MAE1DF,GAAQI,EACJ,oBAAInE,MAAO,CAAEsF,UAAW,UAAxB,wBACJvB,EAEH,cAAC,EAAD,CAAatD,SAAUsD,EAAKwB,KAAM7E,KAAMqD,EAAKrD,KAAMrB,SAAUA,IAF7C,OAyBd,iCACE,oCAEE,oBACEuE,KAAK,oCACLT,OAAO,SACPnD,MAAO,CAAEH,MAAO,OAChB2F,IAAI,sBAJN,UAMG,IANH,gC,MErEZC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.8a03ef32.chunk.js","sourcesContent":["import React from \"react\";\r\n// import \"../css/WeatherCard.scss\";\r\nimport { IoTrendingUp, IoTrendingDown } from \"react-icons/io5\";\r\nimport { IconContext } from \"react-icons\";\r\n\r\nconst round = (degree) => {\r\n  return Math.round(degree);\r\n};\r\n\r\nconst days = [\r\n  \"Sunday\",\r\n  \"Monday\",\r\n  \"Tuesday\",\r\n  \"Wednesday\",\r\n  \"Thursday\",\r\n  \"Friday\",\r\n  \"Saturday\",\r\n];\r\n\r\nconst convertfromFtoC = (degree) => (degree - 32) * (5 / 9);\r\n\r\nlet upLimit = 65;\r\n\r\nconst WeatherCard = ({\r\n  dt,\r\n  tempMin,\r\n  tempMax,\r\n  main,\r\n  icon,\r\n  description,\r\n  tempType,\r\n}) => {\r\n  if (tempType === \"C\") {\r\n    tempMin = convertfromFtoC(tempMin);\r\n    tempMax = convertfromFtoC(tempMax);\r\n    upLimit = 18;\r\n  } else {\r\n    upLimit = 65;\r\n  }\r\n  const date = new Date(dt);\r\n  return (\r\n    <div className=\"weather-card\">\r\n      <div className=\"weather-image\">\r\n        <img\r\n          src={`https://openweathermap.org/img/wn/${icon}@2x.png`}\r\n          alt={main}\r\n        />\r\n      </div>\r\n      <h2 className=\"high\">\r\n        <span>\r\n          <IconContext.Provider\r\n            value={{\r\n              color: `${tempMax > upLimit ? \"red\" : \"blue\"}`,\r\n              className: \"space\",\r\n            }}\r\n          >\r\n            <IoTrendingUp />\r\n          </IconContext.Provider>\r\n        </span>\r\n        {round(tempMax)} {String.fromCharCode(176)} {tempType}\r\n      </h2>\r\n      <h3 className=\"low\">\r\n        <span>\r\n          <IconContext.Provider\r\n            value={{\r\n              color: `${tempMin <= upLimit ? \"blue\" : \"red\"}`,\r\n              style: { verticalAlign: \"middle\" },\r\n              className: \"space\",\r\n            }}\r\n          >\r\n            <IoTrendingDown />\r\n          </IconContext.Provider>\r\n        </span>\r\n        {round(tempMin)} {String.fromCharCode(176)} {tempType}\r\n      </h3>\r\n      <div className=\"weather-main\">\r\n        <h2 className=\"weather-title\">{main}</h2>\r\n        <h6 className=\"weather-description\">{description}</h6>\r\n        <p className=\"weather-date\">\r\n          {days[date.getDay()]} |{\" \"}\r\n          {date.toLocaleTimeString([], {\r\n            hour: \"numeric\",\r\n          })}\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WeatherCard;\r\n","import React from \"react\";\r\nimport WeatherCard from \"./WeatherCard\";\r\n// import \"../css/WeatherList.scss\";\r\nlet getDate = (dt) => {\r\n  let date = new Date(dt * 1000);\r\n  const days = [\r\n    \"Sunday\",\r\n    \"Monday\",\r\n    \"Tuesday\",\r\n    \"Wednesday\",\r\n    \"Thursday\",\r\n    \"Friday\",\r\n    \"Saturday\",\r\n  ];\r\n  return {\r\n    day: days[date.getDay()],\r\n    time: date.toLocaleTimeString([], {\r\n      hour: \"numeric\",\r\n    }),\r\n  };\r\n};\r\nconst WeatherList = ({ weathers, city, tempType }) => {\r\n  let { dt } = weathers[0];\r\n  let startDate = getDate(dt);\r\n  let endDate = getDate(weathers[4].dt);\r\n  return (\r\n    <>\r\n      <div className=\"update\">\r\n        <h3>\r\n          Weather update in {city.name}, {city.country} from {startDate.day},{\" \"}\r\n          {startDate.time} to {endDate.day}, {endDate.time}\r\n        </h3>\r\n      </div>\r\n      <div className=\"container\">\r\n        {weathers.map(({ dt, main, weather }) => (\r\n          <div key={dt}>\r\n            <WeatherCard\r\n              tempMax={main.temp_max}\r\n              tempMin={main.temp_min}\r\n              dt={dt * 1000}\r\n              main={weather[0].main}\r\n              icon={weather[0].icon}\r\n              description={weather[0].description}\r\n              tempType={tempType}\r\n            />\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default WeatherList;\r\n","import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyles = createGlobalStyle`\r\n*,\r\n*::after,\r\n*::before {\r\n  box-sizing: border-box;\r\n  outline: none;\r\n}\r\n\r\nbody{\r\n    align-items: center;\r\n    background-color: ${({ theme }) => theme.body};\r\n    color: ${({ theme }) => theme.text};\r\n    display: flex;\r\n    flex-direction: column;\r\n    font-family: -apple-system, \"Nunito\", \"Roboto\", \"Lato\", sans-serif;\r\n    justify-content: center;\r\n    margin: 0;\r\n    max-width: 100%;\r\n    padding: 0;\r\n    transition: all 0.25s linear;\r\n    -moz-osx-font-smoothing: grayscale;\r\n    -webkit-font-smoothing: antialiased;\r\n}\r\n\r\na {\r\n    text-decoration: none;\r\n}\r\n  \r\n\r\n.weather-card {\r\n    background-color: ${({ theme }) => theme.cardColor};\r\n    color: ${({ theme }) => theme.cardText}\r\n}\r\n\r\n.search input {\r\n    color: ${({ theme }) => theme.searchText};\r\n}\r\n\r\n.search-icon {\r\n    color: ${({ theme }) => theme.text}\r\n}\r\n\r\n.page-heading a {\r\n    color: ${({ theme }) => theme.title}\r\n}\r\n\r\n.temperature-toggler {\r\n    color: ${({ theme }) => theme.text}\r\n}\r\n`;\r\n","const lightWhite = \"#e3e3e3\";\r\nconst lightBlack = \"#202020\";\r\nconst gray = \"#8a8a8a\";\r\nconst white = \"#ffffff\";\r\nconst black = \"#000000\";\r\nconst orange = \"orange\";\r\n\r\nexport const darkTheme = {\r\n  body: lightBlack,\r\n  text: white,\r\n  cardColor: gray,\r\n  cardText: black,\r\n  searchText: white,\r\n  title: orange,\r\n};\r\n\r\nexport const lightTheme = {\r\n  body: lightWhite,\r\n  text: black,\r\n  cardColor: white,\r\n  cardText: black,\r\n  searchText: black,\r\n  title: black,\r\n};\r\n","import React from \"react\";\r\n// import \"../css/TemperatureToggler.scss\";\r\n\r\nconst TemperatureToggler = ({ c, f, cf, cc }) => {\r\n  return (\r\n    <div className=\"temp-wrapper\">\r\n      <span className=\"toggler\" style={{ color: cf }} onClick={f}>\r\n        {`${String.fromCharCode(176)}F`}\r\n      </span>\r\n      <span> | </span>\r\n      <span className=\"toggler\" style={{ color: cc }} onClick={c}>\r\n        {`${String.fromCharCode(176)}C`}\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TemperatureToggler;\r\n","import React from \"react\";\r\n// import \"../css/ThemeToggler.scss\";\r\n\r\nconst ThemeToggler = ({ toggler }) => {\r\n  return (\r\n    <>\r\n      <label className=\"switch\">\r\n        <input type=\"checkbox\" onClick={toggler} />\r\n        <span className=\"round-slider\"></span>\r\n      </label>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ThemeToggler;\r\n","import React, { useState } from \"react\";\r\n// import \"../css/SelectCity.scss\";\r\nimport { IconContext } from \"react-icons\";\r\nimport { IoSearchOutline } from \"react-icons/io5\";\r\n\r\nconst SelectCity = ({ onSearch }) => {\r\n  const [city, setCity] = useState(\"\");\r\n\r\n  return (\r\n    <>\r\n      <form className=\"search\">\r\n        <input\r\n          className=\"search-input\"\r\n          autoComplete=\"off\"\r\n          placeholder=\"Accra,GH\"\r\n          onChange={(e) => {\r\n            e.preventDefault();\r\n            let input = e.target.value;\r\n            setCity(input);\r\n          }}\r\n          value={city}\r\n        />\r\n        <button\r\n          onClick={(e) => {\r\n            e.preventDefault();\r\n            onSearch(city);\r\n          }}\r\n        >\r\n          <IconContext.Provider\r\n            value={{\r\n              style: { verticalAlign: \"middle\", fontSize: \"2rem\" },\r\n              className: \"search-icon\",\r\n            }}\r\n          >\r\n            <IoSearchOutline />\r\n          </IconContext.Provider>\r\n        </button>\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SelectCity;\r\n","import React from \"react\";\r\nimport TemperatureToggler from \"./TemperatureToggler\";\r\nimport ThemeToggler from \"./ThemeToggler\";\r\nimport SelectCity from \"./Search\";\r\n\r\nconst NavBar = ({ themeToggler, search, celcius, fahrenheit, colC, colF }) => {\r\n  return (\r\n    <>\r\n      <div className=\"nav-bar\">\r\n        <ul className=\"nav-bar-list\">\r\n          <li>\r\n            <h4 className=\"page-heading\">\r\n              <a href=\"/\">3 Hr Weather Forecast</a>\r\n            </h4>\r\n          </li>\r\n          <li>\r\n            <TemperatureToggler\r\n              c={celcius}\r\n              f={fahrenheit}\r\n              cc={colC}\r\n              cf={colF}\r\n            />\r\n          </li>\r\n          <li>\r\n            <ThemeToggler toggler={themeToggler} />\r\n          </li>\r\n          <li>\r\n            <SelectCity onSearch={search} />\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import { useState, useEffect } from \"react\";\r\n\r\nconst UseFetch = (initialUrl) => {\r\n  const [data, setData] = useState(null);\r\n  const [error, setError] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(null);\r\n  const [url, setUrl] = useState(initialUrl);\r\n\r\n  useEffect(() => {\r\n    if (!url) return;\r\n    setIsLoading(true);\r\n    setData(null);\r\n    setError(null);\r\n    fetch(url)\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        setIsLoading(false);\r\n        if (data.cod >= 400) {\r\n          setError(data.message);\r\n          return;\r\n        }\r\n        setData(data);\r\n      })\r\n      .catch((error) => {\r\n        setIsLoading(false);\r\n        setError(error);\r\n      });\r\n  }, [url]);\r\n\r\n  return { data, error, isLoading, setUrl };\r\n};\r\n\r\nexport default UseFetch;\r\n","import React, { useState } from \"react\";\n// import \"../css/App.scss\";\n// import \"../css/MediaQuery.scss\";\nimport { API_KEY, API_BASE_URL } from \"../config/config\";\nimport WeatherList from \"./WeatherList\";\nimport { ThemeProvider } from \"styled-components\";\nimport { GlobalStyles } from \"../themes/global\";\nimport { lightTheme, darkTheme } from \"../themes/theme\";\nimport NavBar from \"./NavBar\";\nimport UseFetch from \"../hooks/UseFetch\";\n\nconst App = () => {\n  const { data, error, isLoading, setUrl } = UseFetch();\n  // console.log(data);\n\n  const [theme, setTheme] = useState(\"light\");\n  const [tempType, setTempType] = useState(\"F\");\n  const [colorF, setColorF] = useState(\"orange\");\n  const [colorC, setColorC] = useState(\"\");\n\n  const setCelcius = () => {\n    setTempType(\"C\");\n    setColorC(\"orange\");\n    setColorF(\"\");\n  };\n  const setFahrenheit = () => {\n    setTempType(\"F\");\n    setColorC(\"\");\n    setColorF(\"orange\");\n  };\n\n  const toggleTheme = () => {\n    if (theme === \"light\") {\n      setTheme(\"dark\");\n    } else {\n      setTheme(\"light\");\n    }\n  };\n\n  const displayContent = () => {\n    if (error)\n      return (\n        <h3 style={{ textAlign: \"center\" }}>Error while fetching: {error}</h3>\n      );\n    if (!data && isLoading)\n      return <h2 style={{ textAlign: \"center\" }}>Loading...</h2>;\n    if (!data) return null;\n    return (\n      <WeatherList weathers={data.list} city={data.city} tempType={tempType} />\n    );\n  };\n\n  return (\n    <ThemeProvider theme={theme === \"light\" ? lightTheme : darkTheme}>\n      <>\n        <GlobalStyles />\n        <header>\n          <NavBar\n            themeToggler={toggleTheme}\n            search={(city) => {\n              setUrl(\n                `${API_BASE_URL}/data/2.5/forecast?q=${city}&cnt=5&appid=${API_KEY}&units=imperial`\n              );\n            }}\n            celcius={setCelcius}\n            fahrenheit={setFahrenheit}\n            colF={colorF}\n            colC={colorC}\n          />\n        </header>\n        <main>{displayContent()}</main>\n        <footer>\n          <p>\n            by:\n            <a\n              href=\"https://emmanuel-mireku.github.io\"\n              target=\"_blank\"\n              style={{ color: \"red\" }}\n              rel=\"noreferrer noopener\"\n            >\n              {\" \"}\n              Emmanuel Mireku\n            </a>\n          </p>\n        </footer>\n      </>\n    </ThemeProvider>\n  );\n};\nexport default App;\n","export const API_KEY = \"22e8f7a89168dea7870d59235cc1587d\";\r\nexport const API_BASE_URL = \"https://api.openweathermap.org/\";\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport \"./css/index.scss\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}